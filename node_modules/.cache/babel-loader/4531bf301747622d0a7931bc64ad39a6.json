{"ast":null,"code":"const pushServerPublicKey = \"BFP1Dt3LZz9md5h8bZjAru8fY-ACbUFLpI4-Ln0lBrhMd694T_ujWSM6cxq_bu6SYMaV6pB3aRwprWdt_ufrqi0\";\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4); // eslint-disable-next-line\n\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\n * checks if Push notification and service workers are supported by your browser\n */\n\n\nfunction isPushNotificationSupported() {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n}\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\n\n\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n/**\n *\n */\n\n\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register('/sw.js');\n}\n/**\n *\n * using the registered service worker creates a push notification subscription and returns it\n *\n */\n\n\nasync function createNotificationSubscription() {\n  //wait for service worker installation to be ready\n  // subscribe and return the subscription\n  const applicationServerKey = urlB64ToUint8Array(pushServerPublicKey); // console.log(applicationServerKey)\n\n  return navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {\n    var options = {\n      userVisibleOnly: true,\n      applicationServerKey: applicationServerKey\n    };\n    serviceWorkerRegistration.pushManager.subscribe(options).then(function (pushSubscription) {\n      return pushSubscription; // The push subscription details needed by the application\n      // server are now available, and can be sent to it using,\n      // for example, an XMLHttpRequest.\n    }, function (error) {\n      // During development it often helps to log errors to the\n      // console. In a production environment it might make sense to\n      // also report information about errors back to the\n      // application server.\n      console.log(error);\n    });\n  });\n}\n/**\n * returns the subscription if present or nothing\n */\n\n\nfunction getUserSubscription() {\n  //wait for service worker installation to be ready, and then\n  return navigator.serviceWorker.ready.then(function (serviceWorker) {\n    return serviceWorker.pushManager.getSubscription();\n  }).then(function (pushSubscription) {\n    return pushSubscription;\n  });\n}\n\nexport { isPushNotificationSupported, askUserPermission, registerServiceWorker, createNotificationSubscription, getUserSubscription };","map":{"version":3,"sources":["/Users/siddhantsehgal/Desktop/userlogin/client/src/components/push-notifications.js"],"names":["pushServerPublicKey","urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","isPushNotificationSupported","navigator","window","askUserPermission","Notification","requestPermission","registerServiceWorker","serviceWorker","register","createNotificationSubscription","applicationServerKey","ready","then","serviceWorkerRegistration","options","userVisibleOnly","pushManager","subscribe","pushSubscription","error","console","log","getUserSubscription","getSubscription"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,yFAA5B;;AAEA,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AACxC,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,CAAC,IAAKF,YAAY,CAACG,MAAb,GAAsB,CAA5B,IAAkC,CAA7C,CAAhB,CADwC,CAExC;;AACA,QAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAhB,EAAyBI,OAAzB,CAAiC,KAAjC,EAAwC,GAAxC,EAA6CA,OAA7C,CAAqD,IAArD,EAA2D,GAA3D,CAAf;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACH,MAAD,CAApB;AACA,QAAMI,WAAW,GAAG,IAAIC,UAAJ,CAAeH,OAAO,CAACH,MAAvB,CAApB;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACH,MAA5B,EAAoC,EAAEO,CAAtC,EAAyC;AACvCF,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBJ,OAAO,CAACK,UAAR,CAAmBD,CAAnB,CAAjB;AACD;;AACD,SAAOF,WAAP;AACD;AACD;;;;;AAGA,SAASI,2BAAT,GAAuC;AACrC,SAAO,mBAAmBC,SAAnB,IAAgC,iBAAiBC,MAAxD;AACD;AAED;;;;;AAGA,eAAeC,iBAAf,GAAmC;AACjC,SAAO,MAAMC,YAAY,CAACC,iBAAb,EAAb;AACD;AACD;;;;;AAGA,SAASC,qBAAT,GAAiC;AAC/B,SAAOL,SAAS,CAACM,aAAV,CAAwBC,QAAxB,CAAiC,QAAjC,CAAP;AACD;AAED;;;;;;;AAKA,eAAeC,8BAAf,GAAgD;AAC9C;AACA;AACA,QAAMC,oBAAoB,GAAGvB,kBAAkB,CAACD,mBAAD,CAA/C,CAH8C,CAI9C;;AACA,SAAOe,SAAS,CAACM,aAAV,CAAwBI,KAAxB,CAA8BC,IAA9B,CACL,UAASC,yBAAT,EAAoC;AAClC,QAAIC,OAAO,GAAG;AACZC,MAAAA,eAAe,EAAE,IADL;AAEZL,MAAAA,oBAAoB,EAAEA;AAFV,KAAd;AAIAG,IAAAA,yBAAyB,CAACG,WAA1B,CAAsCC,SAAtC,CAAgDH,OAAhD,EAAyDF,IAAzD,CACE,UAASM,gBAAT,EAA2B;AACzB,aAAOA,gBAAP,CADyB,CAEzB;AACA;AACA;AACD,KANH,EAMK,UAASC,KAAT,EAAgB;AACjB;AACA;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAZH;AAcD,GApBI,CAAP;AAqBD;AAED;;;;;AAGA,SAASG,mBAAT,GAA+B;AAC7B;AACA,SAAOrB,SAAS,CAACM,aAAV,CAAwBI,KAAxB,CACJC,IADI,CACC,UAASL,aAAT,EAAwB;AAC5B,WAAOA,aAAa,CAACS,WAAd,CAA0BO,eAA1B,EAAP;AACD,GAHI,EAIJX,IAJI,CAIC,UAASM,gBAAT,EAA2B;AAC/B,WAAOA,gBAAP;AACD,GANI,CAAP;AAOD;;AAED,SACElB,2BADF,EAEEG,iBAFF,EAGEG,qBAHF,EAIEG,8BAJF,EAKEa,mBALF","sourcesContent":["const pushServerPublicKey = \"BFP1Dt3LZz9md5h8bZjAru8fY-ACbUFLpI4-Ln0lBrhMd694T_ujWSM6cxq_bu6SYMaV6pB3aRwprWdt_ufrqi0\";\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/')\n  const rawData = atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n/**\n * checks if Push notification and service workers are supported by your browser\n */\nfunction isPushNotificationSupported() {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n}\n\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n/**\n *\n */\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register('/sw.js');\n}\n\n/**\n *\n * using the registered service worker creates a push notification subscription and returns it\n *\n */\nasync function createNotificationSubscription() {\n  //wait for service worker installation to be ready\n  // subscribe and return the subscription\n  const applicationServerKey = urlB64ToUint8Array(pushServerPublicKey)\n  // console.log(applicationServerKey)\n  return navigator.serviceWorker.ready.then(\n    function(serviceWorkerRegistration) {\n      var options = {\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey\n      };\n      serviceWorkerRegistration.pushManager.subscribe(options).then(\n        function(pushSubscription) {\n          return pushSubscription\n          // The push subscription details needed by the application\n          // server are now available, and can be sent to it using,\n          // for example, an XMLHttpRequest.\n        }, function(error) {\n          // During development it often helps to log errors to the\n          // console. In a production environment it might make sense to\n          // also report information about errors back to the\n          // application server.\n          console.log(error);\n        }\n      );\n    });\n}\n\n/**\n * returns the subscription if present or nothing\n */\nfunction getUserSubscription() {\n  //wait for service worker installation to be ready, and then\n  return navigator.serviceWorker.ready\n    .then(function(serviceWorker) {\n      return serviceWorker.pushManager.getSubscription();\n    })\n    .then(function(pushSubscription) {\n      return pushSubscription;\n    });\n}\n\nexport {\n  isPushNotificationSupported,\n  askUserPermission,\n  registerServiceWorker,\n  createNotificationSubscription,\n  getUserSubscription\n};"]},"metadata":{},"sourceType":"module"}