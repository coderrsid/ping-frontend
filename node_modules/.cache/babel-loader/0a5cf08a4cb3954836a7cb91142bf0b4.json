{"ast":null,"code":"const pushServerPublicKey = \"BFP1Dt3LZz9md5h8bZjAru8fY-ACbUFLpI4-Ln0lBrhMd694T_ujWSM6cxq_bu6SYMaV6pB3aRwprWdt_ufrqi0\";\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4); // eslint-disable-next-line\n\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\n * checks if Push notification and service workers are supported by your browser\n */\n\n\nfunction isPushNotificationSupported() {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n}\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\n\n\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n/**\n * shows a notification\n */\n\n\nfunction sendNotification() {\n  const img = \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\";\n  const text = \"Take a look at this brand new t-shirt!\";\n  const title = \"New Product Available\";\n  const options = {\n    body: text,\n    icon: \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\",\n    vibrate: [200, 100, 200],\n    tag: \"new-product\",\n    image: img,\n    badge: \"https://spyna.it/icons/android-icon-192x192.png\",\n    actions: [{\n      action: \"Detail\",\n      title: \"View\",\n      icon: \"https://via.placeholder.com/128/ff0000\"\n    }]\n  };\n  navigator.serviceWorker.ready.then(function (serviceWorker) {\n    serviceWorker.showNotification(title, options);\n  });\n}\n/**\n *\n */\n\n\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register('/sw.js');\n}\n/**\n *\n * using the registered service worker creates a push notification subscription and returns it\n *\n */\n\n\nasync function createNotificationSubscription() {\n  //wait for service worker installation to be ready\n  const serviceWorker = await navigator.serviceWorker.ready; // subscribe and return the subscription\n\n  const applicationServerKey = urlB64ToUint8Array(pushServerPublicKey); // console.log(applicationServerKey)\n\n  return await navigator.serviceWorker.ready.then((await serviceWorker.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: applicationServerKey\n  })));\n}\n/**\n * returns the subscription if present or nothing\n */\n\n\nfunction getUserSubscription() {\n  //wait for service worker installation to be ready, and then\n  return navigator.serviceWorker.ready.then(function (serviceWorker) {\n    return serviceWorker.pushManager.getSubscription();\n  }).then(function (pushSubscription) {\n    return pushSubscription;\n  });\n}\n\nexport { isPushNotificationSupported, askUserPermission, registerServiceWorker, sendNotification, createNotificationSubscription, getUserSubscription };","map":{"version":3,"sources":["/Users/siddhantsehgal/Desktop/userlogin/client/src/components/push-notifications.js"],"names":["pushServerPublicKey","urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","isPushNotificationSupported","navigator","window","askUserPermission","Notification","requestPermission","sendNotification","img","text","title","options","body","icon","vibrate","tag","image","badge","actions","action","serviceWorker","ready","then","showNotification","registerServiceWorker","register","createNotificationSubscription","applicationServerKey","pushManager","subscribe","userVisibleOnly","getUserSubscription","getSubscription","pushSubscription"],"mappings":"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","sourcesContent":["const pushServerPublicKey = \"BFP1Dt3LZz9md5h8bZjAru8fY-ACbUFLpI4-Ln0lBrhMd694T_ujWSM6cxq_bu6SYMaV6pB3aRwprWdt_ufrqi0\";\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/')\n  const rawData = atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n/**\n * checks if Push notification and service workers are supported by your browser\n */\nfunction isPushNotificationSupported() {\n  return \"serviceWorker\" in navigator && \"PushManager\" in window;\n}\n\n/**\n * asks user consent to receive push notifications and returns the response of the user, one of granted, default, denied\n */\nasync function askUserPermission() {\n  return await Notification.requestPermission();\n}\n/**\n * shows a notification\n */\nfunction sendNotification() {\n  const img = \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\";\n  const text = \"Take a look at this brand new t-shirt!\";\n  const title = \"New Product Available\";\n  const options = {\n    body: text,\n    icon: \"/images/jason-leung-HM6TMmevbZQ-unsplash.jpg\",\n    vibrate: [200, 100, 200],\n    tag: \"new-product\",\n    image: img,\n    badge: \"https://spyna.it/icons/android-icon-192x192.png\",\n    actions: [{ action: \"Detail\", title: \"View\", icon: \"https://via.placeholder.com/128/ff0000\" }]\n  };\n  navigator.serviceWorker.ready.then(function(serviceWorker) {\n    serviceWorker.showNotification(title, options);\n  });\n}\n\n/**\n *\n */\nfunction registerServiceWorker() {\n  return navigator.serviceWorker.register('/sw.js');\n}\n\n/**\n *\n * using the registered service worker creates a push notification subscription and returns it\n *\n */\nasync function createNotificationSubscription() {\n  //wait for service worker installation to be ready\n  const serviceWorker = await navigator.serviceWorker.ready;\n  // subscribe and return the subscription\n  const applicationServerKey = urlB64ToUint8Array(pushServerPublicKey)\n  // console.log(applicationServerKey)\n  return await navigator.serviceWorker.ready.then(\n    await serviceWorker.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: applicationServerKey\n    })\n  )\n}\n\n/**\n * returns the subscription if present or nothing\n */\nfunction getUserSubscription() {\n  //wait for service worker installation to be ready, and then\n  return navigator.serviceWorker.ready\n    .then(function(serviceWorker) {\n      return serviceWorker.pushManager.getSubscription();\n    })\n    .then(function(pushSubscription) {\n      return pushSubscription;\n    });\n}\n\nexport {\n  isPushNotificationSupported,\n  askUserPermission,\n  registerServiceWorker,\n  sendNotification,\n  createNotificationSubscription,\n  getUserSubscription\n};"]},"metadata":{},"sourceType":"module"}